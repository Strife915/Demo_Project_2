//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/GameFolders/Scripts/Concrete/Input/MouseClicks.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MouseClicks : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MouseClicks()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MouseClicks"",
    ""maps"": [
        {
            ""name"": ""PlayerMouse"",
            ""id"": ""7da3bdc6-b2ce-4cc9-acc5-3ff26cfd3b25"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""9b2074bc-d647-469f-b394-b716a217bb3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""903f9835-3c92-4ceb-9430-9d1856372646"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""10d840b9-d76e-4740-a2e7-9087ca06de3f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3fb7e77-cb30-421c-b877-66b32cbb6f72"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84f75607-5141-4187-a148-a5beb74e6bb4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""288756a4-6718-4e15-a59b-0da72bccae17"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMouse
        m_PlayerMouse = asset.FindActionMap("PlayerMouse", throwIfNotFound: true);
        m_PlayerMouse_LeftClick = m_PlayerMouse.FindAction("LeftClick", throwIfNotFound: true);
        m_PlayerMouse_RightClick = m_PlayerMouse.FindAction("RightClick", throwIfNotFound: true);
        m_PlayerMouse_MousePosition = m_PlayerMouse.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMouse
    private readonly InputActionMap m_PlayerMouse;
    private IPlayerMouseActions m_PlayerMouseActionsCallbackInterface;
    private readonly InputAction m_PlayerMouse_LeftClick;
    private readonly InputAction m_PlayerMouse_RightClick;
    private readonly InputAction m_PlayerMouse_MousePosition;
    public struct PlayerMouseActions
    {
        private @MouseClicks m_Wrapper;
        public PlayerMouseActions(@MouseClicks wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_PlayerMouse_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_PlayerMouse_RightClick;
        public InputAction @MousePosition => m_Wrapper.m_PlayerMouse_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMouseActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMouseActions instance)
        {
            if (m_Wrapper.m_PlayerMouseActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnRightClick;
                @MousePosition.started -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_PlayerMouseActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_PlayerMouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public PlayerMouseActions @PlayerMouse => new PlayerMouseActions(this);
    public interface IPlayerMouseActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
